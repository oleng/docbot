TODO
-----

Create YAML config file to hold variables
Freeze user call command 
2016/11/18  clean up generated Markdown (another filter pass utility)
2016/11/18  fine tune definition body
2016/11/18  build logger that also prints out to stdout



DONE
------

2016/11/18  v3/v2 capability
2016/11/18  found way to serve based on minor version instead of just v3/v2


Database
    |__ Table
        |__ Row - Column
                - Column
                - Column

DocBot_DB
    |__ Sections
            |__ Syntax      - id
            |               - date_created
            |               - version_id
            |               - version_major
            |               - version_minor
            |               - version_micro
            |               - topic
            |               - section
            |               - keyword
            |               - url
            |               - header
            |               - body
            |               - footer


DocBot_DB
    |__ Library
            |__ classmethod - id
            |               - date_created
            |               - version_id: 3
            |               - version_major: 3
            |               - version_minor: 5
            |               - version_micro: 2
            |               - topic: standard library
            |               - section: built-in functions
            |               - keyword: classmethod
            |               - url
            |               - header
            |               - body
            |               - footer


                    ''' [ Header ] sections '''
                    # replace relative URLs in href to absolute path using regex
                    internal_link = transform_relative_links(section.a['href'])
                    if internal_link is not False:
                        section.a['href'] = internal_link
                        # p.pprint(header_link.__dict__)
                    url = section.a['href']
                    
                    # < Hack > copy untouched section.dd 1st since we're destroying all 
                    # spans & still need to manipulate them in body (section.dd) later
                    store_dd = cp.copy(section.dd)
                    for span in section.find_all('span'):
                        span.unwrap()
                    # put copy back
                    section.dd = store_dd

                    # Process header data from dt
                    # < Hack > fix annoying trailing space in <em>class </em> to avoid 
                    # incorrect markdown formatting
                    for em in section.dt.find_all('em', {'class': 'property'}):
                        next_txt = em.next_sibling.string
                        # unwrap the sibling to avoid double markup
                        em.next_sibling.unwrap()
                    # < Hack > around BS because making it output simple strings is like 
                    # getting your money back from asshole you misjudged a long time ago
                    transform_header = []
                    for content in section.dt.contents:
                        transform_header.append(str(content))
                    # Format header section
                    header = '{0}{1}'.format(
                            markdown_header('h5'),
                            h.handle(''.join(transform_header).strip()),
                            )

                    ''' [ Body ] section '''
                    # convert internal & relative url links to absolute paths
                    for link in section.dd.select('a[href]'):
                        if link is not None:
                            transform_link = transform_relative_links(link.attrs['href'])
                            link.attrs['href'] = transform_link

                    transform_body =[]
                    for content in section.dd.contents:
                        transform_body.append(str(content))
                    body = str(h.handle(''.join(transform_body).strip()))

                    ''' [ Footer ]  '''
                    footer = apply_footer(DOC_FULL_URL) # to do

                    ''' Store all the data '''
                    keyword_dict = { 
                        'version': DOC_VERSION,
                        'version_full': DOC_LONGVERSION,
                        'topic': DOC_TOPIC,
                        'section': DOC_SECTION,
                        # 'keyword': keyword,
                        'url' : url,
                        'header': header, 
                        'body': body, 
                        'footer': footer,
                    }
                    # datadump[keyword] = keyword_dict.copy() # faster than update()
                    print(keyword_dict)
                    # create_db('DocBot_DB.db', db_table)
                    '''
                    db_query(
                            'insert', 'DocBot_DB.db', table=db_table, 
                            version_id=version_id, 
                            version_major=version_major, 
                            version_minor=version_minor, 
                            version_micro=version_micro, 
                            topic=DOC_TOPIC, 
                            section=DOC_SECTION, 
                            keyword=keyword, 
                            url=url,
                            header=header, 
                            body=body, 
                            footer=footer
                            )
                    '''

                else:
                    print('pass')